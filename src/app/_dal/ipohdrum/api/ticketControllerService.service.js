"use strict";
/**
 * Ipoh Drum Laravel API
 * This is a swagger-generated API documentation for the project Ipoh Drum. (Only supports OpenAPI Annotations for now.)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: henry_lcz97@hotmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var encoder_1 = require("../encoder");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
var TicketControllerServiceService = /** @class */ (function () {
    function TicketControllerServiceService(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://localhost:8000';
        this.defaultHeaders = new http_1.HttpHeaders();
        this.configuration = new configuration_1.Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new encoder_1.CustomHttpParameterCodec();
    }
    TicketControllerServiceService.prototype.createTicket = function (name, storeid, promotionid, sku, price, qty, enddate, onsale, code, desc, imgpath, stockthreshold, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling createTicket.');
        }
        if (storeid === null || storeid === undefined) {
            throw new Error('Required parameter storeid was null or undefined when calling createTicket.');
        }
        if (promotionid === null || promotionid === undefined) {
            throw new Error('Required parameter promotionid was null or undefined when calling createTicket.');
        }
        if (sku === null || sku === undefined) {
            throw new Error('Required parameter sku was null or undefined when calling createTicket.');
        }
        if (price === null || price === undefined) {
            throw new Error('Required parameter price was null or undefined when calling createTicket.');
        }
        if (qty === null || qty === undefined) {
            throw new Error('Required parameter qty was null or undefined when calling createTicket.');
        }
        if (enddate === null || enddate === undefined) {
            throw new Error('Required parameter enddate was null or undefined when calling createTicket.');
        }
        if (onsale === null || onsale === undefined) {
            throw new Error('Required parameter onsale was null or undefined when calling createTicket.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: this.encoder });
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', name);
        }
        if (storeid !== undefined && storeid !== null) {
            queryParameters = queryParameters.set('storeid', storeid);
        }
        if (promotionid !== undefined && promotionid !== null) {
            queryParameters = queryParameters.set('promotionid', promotionid);
        }
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', code);
        }
        if (sku !== undefined && sku !== null) {
            queryParameters = queryParameters.set('sku', sku);
        }
        if (desc !== undefined && desc !== null) {
            queryParameters = queryParameters.set('desc', desc);
        }
        if (imgpath !== undefined && imgpath !== null) {
            queryParameters = queryParameters.set('imgpath', imgpath);
        }
        if (price !== undefined && price !== null) {
            queryParameters = queryParameters.set('price', price);
        }
        if (qty !== undefined && qty !== null) {
            queryParameters = queryParameters.set('qty', qty);
        }
        if (stockthreshold !== undefined && stockthreshold !== null) {
            queryParameters = queryParameters.set('stockthreshold', stockthreshold);
        }
        if (enddate !== undefined && enddate !== null) {
            queryParameters = queryParameters.set('enddate', enddate);
        }
        if (onsale !== undefined && onsale !== null) {
            queryParameters = queryParameters.set('onsale', onsale);
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.post(this.configuration.basePath + "/api/ticket", null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    TicketControllerServiceService.prototype.deleteTicketByUid = function (uid, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling deleteTicketByUid.');
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.delete(this.configuration.basePath + "/api/ticket/" + encodeURIComponent(String(uid)), {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    TicketControllerServiceService.prototype.filterTickets = function (pageNumber, pageSize, keyword, fromdate, todate, onsale, status, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: this.encoder });
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', pageSize);
        }
        if (keyword !== undefined && keyword !== null) {
            queryParameters = queryParameters.set('keyword', keyword);
        }
        if (fromdate !== undefined && fromdate !== null) {
            queryParameters = queryParameters.set('fromdate', fromdate);
        }
        if (todate !== undefined && todate !== null) {
            queryParameters = queryParameters.set('todate', todate);
        }
        if (onsale !== undefined && onsale !== null) {
            queryParameters = queryParameters.set('onsale', onsale);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', status);
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(this.configuration.basePath + "/api/filter/ticket", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    TicketControllerServiceService.prototype.getTicketByUid = function (uid, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getTicketByUid.');
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(this.configuration.basePath + "/api/ticket/" + encodeURIComponent(String(uid)), {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    TicketControllerServiceService.prototype.getTickets = function (pageNumber, pageSize, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: this.encoder });
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', pageSize);
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(this.configuration.basePath + "/api/ticket", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    TicketControllerServiceService.prototype.updateTicketByUid = function (uid, name, storeid, promotionid, sku, price, qty, enddate, onsale, code, desc, imgpath, stockthreshold, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling updateTicketByUid.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling updateTicketByUid.');
        }
        if (storeid === null || storeid === undefined) {
            throw new Error('Required parameter storeid was null or undefined when calling updateTicketByUid.');
        }
        if (promotionid === null || promotionid === undefined) {
            throw new Error('Required parameter promotionid was null or undefined when calling updateTicketByUid.');
        }
        if (sku === null || sku === undefined) {
            throw new Error('Required parameter sku was null or undefined when calling updateTicketByUid.');
        }
        if (price === null || price === undefined) {
            throw new Error('Required parameter price was null or undefined when calling updateTicketByUid.');
        }
        if (qty === null || qty === undefined) {
            throw new Error('Required parameter qty was null or undefined when calling updateTicketByUid.');
        }
        if (enddate === null || enddate === undefined) {
            throw new Error('Required parameter enddate was null or undefined when calling updateTicketByUid.');
        }
        if (onsale === null || onsale === undefined) {
            throw new Error('Required parameter onsale was null or undefined when calling updateTicketByUid.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: this.encoder });
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', name);
        }
        if (storeid !== undefined && storeid !== null) {
            queryParameters = queryParameters.set('storeid', storeid);
        }
        if (promotionid !== undefined && promotionid !== null) {
            queryParameters = queryParameters.set('promotionid', promotionid);
        }
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', code);
        }
        if (sku !== undefined && sku !== null) {
            queryParameters = queryParameters.set('sku', sku);
        }
        if (desc !== undefined && desc !== null) {
            queryParameters = queryParameters.set('desc', desc);
        }
        if (imgpath !== undefined && imgpath !== null) {
            queryParameters = queryParameters.set('imgpath', imgpath);
        }
        if (price !== undefined && price !== null) {
            queryParameters = queryParameters.set('price', price);
        }
        if (qty !== undefined && qty !== null) {
            queryParameters = queryParameters.set('qty', qty);
        }
        if (stockthreshold !== undefined && stockthreshold !== null) {
            queryParameters = queryParameters.set('stockthreshold', stockthreshold);
        }
        if (enddate !== undefined && enddate !== null) {
            queryParameters = queryParameters.set('enddate', enddate);
        }
        if (onsale !== undefined && onsale !== null) {
            queryParameters = queryParameters.set('onsale', onsale);
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.put(this.configuration.basePath + "/api/ticket/" + encodeURIComponent(String(uid)), null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    TicketControllerServiceService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional())
    ], TicketControllerServiceService);
    return TicketControllerServiceService;
}());
exports.TicketControllerServiceService = TicketControllerServiceService;
