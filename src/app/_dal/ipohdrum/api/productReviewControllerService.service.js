"use strict";
/**
 * Ipoh Drum Laravel API
 * This is a swagger-generated API documentation for the project Ipoh Drum. (Only supports OpenAPI Annotations for now.)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: henry_lcz97@hotmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var encoder_1 = require("../encoder");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
var ProductReviewControllerServiceService = /** @class */ (function () {
    function ProductReviewControllerServiceService(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://localhost:8000';
        this.defaultHeaders = new http_1.HttpHeaders();
        this.configuration = new configuration_1.Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new encoder_1.CustomHttpParameterCodec();
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    ProductReviewControllerServiceService.prototype.canConsumeForm = function (consumes) {
        var form = 'multipart/form-data';
        for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
            var consume = consumes_1[_i];
            if (form === consume) {
                return true;
            }
        }
        return false;
    };
    ProductReviewControllerServiceService.prototype.createProductReview = function (title, inventoryId, ticketId, desc, type, rating, img, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (title === null || title === undefined) {
            throw new Error('Required parameter title was null or undefined when calling createProductReview.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: this.encoder });
        if (title !== undefined && title !== null) {
            queryParameters = queryParameters.set('title', title);
        }
        if (inventoryId !== undefined && inventoryId !== null) {
            queryParameters = queryParameters.set('inventory_id', inventoryId);
        }
        if (ticketId !== undefined && ticketId !== null) {
            queryParameters = queryParameters.set('ticket_id', ticketId);
        }
        if (desc !== undefined && desc !== null) {
            queryParameters = queryParameters.set('desc', desc);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', type);
        }
        if (rating !== undefined && rating !== null) {
            queryParameters = queryParameters.set('rating', rating);
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'multipart/form-data'
        ];
        var canConsumeForm = this.canConsumeForm(consumes);
        var formParams;
        var useForm = false;
        var convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new http_1.HttpParams({ encoder: this.encoder });
        }
        if (img) {
            if (useForm) {
                img.forEach(function (element) {
                    formParams = formParams.append('img', element) || formParams;
                });
            }
            else {
                formParams = formParams.append('img', img.join(variables_1.COLLECTION_FORMATS['csv'])) || formParams;
            }
        }
        return this.httpClient.post(this.configuration.basePath + "/api/productreview", convertFormParamsToString ? formParams.toString() : formParams, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    ProductReviewControllerServiceService.prototype.deleteProductReviewByUid = function (uid, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling deleteProductReviewByUid.');
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.delete(this.configuration.basePath + "/api/productreview/" + encodeURIComponent(String(uid)), {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    ProductReviewControllerServiceService.prototype.filterProductReviews = function (pageNumber, pageSize, keyword, fromdate, todate, status, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: this.encoder });
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', pageSize);
        }
        if (keyword !== undefined && keyword !== null) {
            queryParameters = queryParameters.set('keyword', keyword);
        }
        if (fromdate !== undefined && fromdate !== null) {
            queryParameters = queryParameters.set('fromdate', fromdate);
        }
        if (todate !== undefined && todate !== null) {
            queryParameters = queryParameters.set('todate', todate);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', status);
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(this.configuration.basePath + "/api/filter/productreview", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    ProductReviewControllerServiceService.prototype.getProductReviewByUid = function (uid, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getProductReviewByUid.');
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(this.configuration.basePath + "/api/productreview/" + encodeURIComponent(String(uid)), {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    ProductReviewControllerServiceService.prototype.getProductReviews = function (pageNumber, pageSize, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        var queryParameters = new http_1.HttpParams({ encoder: this.encoder });
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', pageSize);
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(this.configuration.basePath + "/api/productreview", {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    ProductReviewControllerServiceService.prototype.updateProductReviewByUid = function (uid, title, inventoryId, ticketId, desc, type, rating, img, observe, reportProgress) {
        if (observe === void 0) { observe = 'body'; }
        if (reportProgress === void 0) { reportProgress = false; }
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling updateProductReviewByUid.');
        }
        if (title === null || title === undefined) {
            throw new Error('Required parameter title was null or undefined when calling updateProductReviewByUid.');
        }
        var queryParameters = new http_1.HttpParams({ encoder: this.encoder });
        if (title !== undefined && title !== null) {
            queryParameters = queryParameters.set('title', title);
        }
        if (inventoryId !== undefined && inventoryId !== null) {
            queryParameters = queryParameters.set('inventory_id', inventoryId);
        }
        if (ticketId !== undefined && ticketId !== null) {
            queryParameters = queryParameters.set('ticket_id', ticketId);
        }
        if (desc !== undefined && desc !== null) {
            queryParameters = queryParameters.set('desc', desc);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', type);
        }
        if (rating !== undefined && rating !== null) {
            queryParameters = queryParameters.set('rating', rating);
        }
        var headers = this.defaultHeaders;
        // to determine the Accept header
        var httpHeaderAccepts = [];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'multipart/form-data'
        ];
        var canConsumeForm = this.canConsumeForm(consumes);
        var formParams;
        var useForm = false;
        var convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new http_1.HttpParams({ encoder: this.encoder });
        }
        if (img) {
            if (useForm) {
                img.forEach(function (element) {
                    formParams = formParams.append('img', element) || formParams;
                });
            }
            else {
                formParams = formParams.append('img', img.join(variables_1.COLLECTION_FORMATS['csv'])) || formParams;
            }
        }
        return this.httpClient.put(this.configuration.basePath + "/api/productreview/" + encodeURIComponent(String(uid)), convertFormParamsToString ? formParams.toString() : formParams, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    };
    ProductReviewControllerServiceService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        }),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional())
    ], ProductReviewControllerServiceService);
    return ProductReviewControllerServiceService;
}());
exports.ProductReviewControllerServiceService = ProductReviewControllerServiceService;
